// Generated by CoffeeScript 1.8.0
(function() {
  var Reader, Writer, code, code2type, type, typecode;

  window.JICKLE = {};

  typecode = {
    string: 0,
    object: 1,
    list: 2,
    int8: 3,
    int8array: 4,
    int16: 5,
    int16array: 6,
    int32: 7,
    int32array: 8,
    int64: 9,
    int64array: 10,
    float16: 11,
    float16array: 12,
    float32: 13,
    float32array: 14,
    float64: 15,
    float64array: 16,
    uint8: 17,
    uint8array: 18,
    uint16: 19,
    uint16array: 20,
    uint32: 21,
    uint32array: 22,
    uint64: 23,
    uint64array: 24,
    "null": 25,
    bool: 26,
    arraybuffer: 27,
    image: 28
  };

  code2type = {};

  for (type in typecode) {
    code = typecode[type];
    code2type[code] = type;
  }

  Reader = (function() {
    function Reader(buffer, onload) {
      this.buffer = buffer;
      this.onload = onload;
      this.view = new DataView(buffer);
      this.offset = 0;
      this.loading = 0;
      this.loaded = 0;
    }

    Reader.prototype.string = function() {
      var i, length, result, _i;
      length = this.uint32();
      result = '';
      for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
        result += String.fromCharCode(this.uint8());
      }
      return decodeURIComponent(escape(result));
    };

    Reader.prototype.object = function() {
      var count, key, result, value, _, _i;
      count = this.uint32();
      result = {};
      for (_ = _i = 0; 0 <= count ? _i < count : _i > count; _ = 0 <= count ? ++_i : --_i) {
        key = this.string();
        value = this.decode();
        result[key] = value;
      }
      return result;
    };

    Reader.prototype.list = function() {
      var count, i, _i, _results;
      count = this.uint32();
      _results = [];
      for (i = _i = 0; 0 <= count ? _i < count : _i > count; i = 0 <= count ? ++_i : --_i) {
        _results.push(this.decode());
      }
      return _results;
    };

    Reader.prototype.uint8 = function() {
      var value;
      value = this.view.getUint8(this.offset, true);
      this.offset += 1;
      return value;
    };

    Reader.prototype.uint8array = function() {
      var length, value;
      length = this.uint32();
      value = new Uint8Array(this.buffer, this.offset, length);
      this.offset += length;
      return value;
    };

    Reader.prototype.int8 = function() {
      var value;
      value = this.view.getInt8(this.offset, true);
      this.offset += 1;
      return value;
    };

    Reader.prototype.int8array = function() {
      var length, value;
      length = this.uint32();
      value = new Int8Array(this.buffer, this.offset, length);
      this.offset += length;
      return value;
    };

    Reader.prototype.uint16 = function() {
      var value;
      value = this.view.getUint16(this.offset, true);
      this.offset += 2;
      return value;
    };

    Reader.prototype.uint16array = function() {
      var length, padding, value;
      length = this.uint32();
      padding = this.offset % 2;
      this.offset += padding;
      value = new Uint16Array(this.buffer, this.offset, length);
      this.offset += length * 2;
      return value;
    };

    Reader.prototype.int16 = function() {
      var value;
      value = this.view.getInt16(this.offset, true);
      this.offset += 2;
      return value;
    };

    Reader.prototype.int16array = function() {
      var length, padding, value;
      length = this.uint32();
      padding = this.offset % 2;
      this.offset += padding;
      value = new Int16Array(this.buffer, this.offset, length);
      this.offset += length * 2;
      return value;
    };

    Reader.prototype.uint32 = function() {
      var value;
      value = this.view.getUint32(this.offset, true);
      this.offset += 4;
      return value;
    };

    Reader.prototype.uint32array = function() {
      var length, padding, value;
      length = this.uint32();
      padding = (4 - (this.offset % 4)) % 4;
      this.offset += padding;
      value = new Uint32Array(this.buffer, this.offset, length);
      this.offset += length * 4;
      return value;
    };

    Reader.prototype.int32 = function() {
      var value;
      value = this.view.getInt32(this.offset, true);
      this.offset += 4;
      return value;
    };

    Reader.prototype.int32array = function() {
      var length, padding, value;
      length = this.uint32();
      padding = (4 - (this.offset % 4)) % 4;
      this.offset += padding;
      value = new Int32Array(this.buffer, this.offset, length);
      this.offset += length * 4;
      return value;
    };

    Reader.prototype.uint64 = function() {
      var value;
      value = this.view.getUint64(this.offset, true);
      this.offset += 8;
      return value;
    };

    Reader.prototype.uint64array = function() {
      var length, padding, value;
      length = this.uint32();
      padding = (8 - (this.offset % 8)) % 8;
      this.offset += padding;
      value = new Uint64Array(this.buffer, this.offset, length);
      this.offset += length * 8;
      return value;
    };

    Reader.prototype.int64 = function() {
      var value;
      value = this.view.getInt64(this.offset, true);
      this.offset += 8;
      return value;
    };

    Reader.prototype.int64array = function() {
      var length, padding, value;
      length = this.uint32();
      padding = (8 - (this.offset % 8)) % 8;
      this.offset += padding;
      value = new Int64Array(this.buffer, this.offset, length);
      this.offset += length * 8;
      return value;
    };

    Reader.prototype.float32 = function() {
      var value;
      value = this.view.getFloat32(this.offset, true);
      this.offset += 4;
      return value;
    };

    Reader.prototype.float32array = function() {
      var length, padding, value;
      length = this.uint32();
      padding = (4 - (this.offset % 4)) % 4;
      this.offset += padding;
      value = new Float32Array(this.buffer, this.offset, length);
      this.offset += length * 4;
      return value;
    };

    Reader.prototype.float64 = function() {
      var value;
      value = this.view.getFloat64(this.offset, true);
      this.offset += 8;
      return value;
    };

    Reader.prototype.float64array = function() {
      var length, padding, value;
      length = this.uint32();
      padding = (8 - (this.offset % 8)) % 8;
      this.offset += padding;
      value = new Float64Array(this.buffer, this.offset, length);
      this.offset += length * 8;
      return value;
    };

    Reader.prototype.arraybuffer = function() {
      var length, result;
      length = this.uint32();
      result = this.buffer.slice(this.offset, this.offset + length);
      this.offset += length;
      return result;
    };

    Reader.prototype.image = function() {
      var blob, bytes, img, url;
      this.loading += 1;
      type = this.string();
      bytes = this.arraybuffer();
      blob = new Blob([bytes], {
        type: type
      });
      url = URL.createObjectURL(blob);
      img = new Image();
      img.type = type;
      img.bytes = bytes;
      img.url = url;
      img.onload = (function(_this) {
        return function() {
          _this.loaded += 1;
          if (_this.loading === _this.loaded) {
            return _this.onload();
          }
        };
      })(this);
      img.src = url;
      return img;
    };

    Reader.prototype.bool = function() {
      var value;
      value = this.view.getUint8(this.offset, true);
      this.offset += 1;
      return value === 1;
    };

    Reader.prototype.decode = function(toplevel) {
      var value;
      type = this.uint8();
      value = (function() {
        switch (type) {
          case typecode.string:
            return this.string();
          case typecode.object:
            return this.object();
          case typecode.list:
            return this.list();
          case typecode.int8:
            return this.int8();
          case typecode.int8array:
            return this.int8array();
          case typecode.uint8:
            return this.uint8();
          case typecode.uint8array:
            return this.uint8array();
          case typecode.int16:
            return this.int16();
          case typecode.int16array:
            return this.int16array();
          case typecode.uint16:
            return this.int16();
          case typecode.uint16array:
            return this.uint16array();
          case typecode.int32:
            return this.int32();
          case typecode.int32array:
            return this.int32array();
          case typecode.uint32:
            return this.int32();
          case typecode.uint32array:
            return this.int32array();
          case typecode.int64:
            return this.int64();
          case typecode.int64array:
            return this.int64array();
          case typecode.uint64:
            return this.int64();
          case typecode.uint64array:
            return this.int64array();
          case typecode.float32:
            return this.float32();
          case typecode.float32array:
            return this.float32array();
          case typecode.float64:
            return this.float64();
          case typecode.float64array:
            return this.float64array();
          case typecode["null"]:
            return null;
          case typecode.bool:
            return this.bool();
          case typecode.arraybuffer:
            return this.arraybuffer();
          case typecode.image:
            return this.image();
          default:
            throw 'unknown type: ' + type;
        }
      }).call(this);
      return value;
    };

    return Reader;

  })();

  Writer = (function() {
    function Writer() {
      this.buffer = new ArrayBuffer(2);
      this.view = new DataView(this.buffer);
      this.offset = 0;
    }

    Writer.prototype.checkSize = function(bytesToWrite) {
      var remaining;
      remaining = this.buffer.byteLength - this.offset;
      if (remaining < bytesToWrite) {
        return this.enlarge(bytesToWrite - remaining);
      }
    };

    Writer.prototype.enlarge = function(minimum) {
      var dst, newBuffer, newSize, src;
      newSize = Math.max(this.buffer.byteLength * 2, this.buffer.byteLength + minimum * 2);
      newBuffer = new ArrayBuffer(newSize);
      src = new Uint8Array(this.buffer);
      dst = new Uint8Array(newBuffer);
      dst.set(src);
      this.buffer = newBuffer;
      return this.view = new DataView(this.buffer);
    };

    Writer.prototype.ubyte = function(value) {
      this.checkSize(1);
      this.view.setUint8(this.offset, value, true);
      return this.offset += 1;
    };

    Writer.prototype.byte = function(value) {
      this.checkSize(1);
      this.view.setInt8(this.offset, value, true);
      return this.offset += 1;
    };

    Writer.prototype.ushort = function(value) {
      this.checkSize(2);
      this.view.setInt16(this.offset, value, true);
      return this.offset += 2;
    };

    Writer.prototype.short = function(value) {
      this.checkSize(2);
      this.view.setUint16(this.offset, value, true);
      return this.offset += 2;
    };

    Writer.prototype.uint = function(value) {
      this.checkSize(4);
      this.view.setUint32(this.offset, value, true);
      return this.offset += 4;
    };

    Writer.prototype.int = function(value) {
      this.checkSize(4);
      this.view.setInt32(this.offset, value, true);
      return this.offset += 4;
    };

    Writer.prototype.float = function(value) {
      this.checkSize(4);
      this.view.setFloat32(this.offset, value, true);
      return this.offset += 4;
    };

    Writer.prototype.double = function(value) {
      this.checkSize(8);
      this.view.setFloat64(this.offset, value, true);
      return this.offset += 8;
    };

    Writer.prototype.string = function(value) {
      var i, length, _i;
      length = value.length;
      this.checkSize(length);
      for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
        this.view.setUint8(this.offset + i, value.charCodeAt(i));
      }
      return this.offset += length;
    };

    Writer.prototype.image = function(img) {
      var bytes, dst, mime, src;
      this.type(typecode.image);
      mime = this.stringToUTF8(img.type);
      this.len(mime.length);
      this.string(mime);
      bytes = img.bytes;
      this.len(bytes.byteLength);
      this.checkSize(bytes.byteLength);
      src = new Uint8Array(bytes);
      dst = new Uint8Array(this.buffer, this.offset, bytes.byteLength);
      dst.set(src);
      return this.offset += bytes.byteLength;
    };

    Writer.prototype.stringToUTF8 = function(value) {
      return unescape(encodeURIComponent(value));
    };

    Writer.prototype.type = function(code) {
      return this.ubyte(code);
    };

    Writer.prototype.len = function(len) {
      return this.uint(len);
    };

    Writer.prototype.typelen = function(type, len) {
      this.type(type);
      return this.len(len);
    };

    Writer.prototype.typedArray = function(value) {
      var bpe, dst, padding;
      bpe = value.BYTES_PER_ELEMENT;
      if (value instanceof Int8Array) {
        type = typecode.int8array;
      } else if (value instanceof Int16Array) {
        type = typecode.int16array;
      } else if (value instanceof Int32Array) {
        type = typecode.int32array;
      } else if (value instanceof Float32Array) {
        type = typecode.float32array;
      } else if (value instanceof Float64Array) {
        type = typecode.float64array;
      } else if (value instanceof Uint8Array) {
        type = typecode.uint8array;
      } else if (value instanceof Uint16Array) {
        type = typecode.uint16array;
      } else if (value instanceof Uint32Array) {
        type = typecode.uint32array;
      } else if (value instanceof Uint64Array) {
        type = typecode.uint64array;
      }
      this.typelen(type, value.length);
      padding = (bpe - (this.offset % bpe)) % bpe;
      this.checkSize(value.byteLength + padding);
      dst = new value.constructor(this.buffer, this.offset + padding, value.length);
      dst.set(value);
      return this.offset += value.byteLength + padding;
    };

    Writer.prototype.arraybuffer = function(value) {
      var dst, src;
      this.typelen(typecode.arraybuffer, value.byteLength);
      this.checkSize(value.byteLength);
      src = new Uint8Array(value);
      dst = new Uint8Array(this.buffer, this.offset, value.byteLength);
      dst.set(src);
      return this.offset += value.byteLength;
    };

    Writer.prototype.encode = function(value) {
      var item, k, size, v, _i, _len;
      type = typeof value;
      if (value instanceof ArrayBuffer) {
        this.arraybuffer(value);
      } else if (ArrayBuffer.isView(value)) {
        this.typedArray(value);
      } else {
        if (value instanceof Array) {
          this.typelen(typecode.list, value.length);
          for (_i = 0, _len = value.length; _i < _len; _i++) {
            item = value[_i];
            this.encode(item);
          }
        } else if (value instanceof Image) {
          this.image(value);
        } else if (value === null) {
          this.type(typecode["null"]);
        } else if (value === void 0) {
          this.type(typecode["null"]);
        } else if (type === 'string') {
          value = this.stringToUTF8(value);
          this.typelen(typecode.string, value.length);
          this.string(value);
        } else if (type === 'number') {
          this.type(typecode.float64);
          this.double(value);
        } else if (type === 'boolean') {
          this.type(typecode.bool);
          if (value) {
            this.ubyte(1);
          } else {
            this.ubyte(0);
          }
        } else if (type === 'object') {
          size = 0;
          for (k in value) {
            v = value[k];
            size += 1;
          }
          this.typelen(typecode.object, size);
          for (k in value) {
            v = value[k];
            k = this.stringToUTF8(k);
            this.len(k.length);
            this.string(k);
            this.encode(v);
          }
        } else {
          throw 'unknown type: ' + type;
        }
      }
      return this.buffer.slice(0, this.offset);
    };

    return Writer;

  })();

  JICKLE.encode = function(value) {
    var writer;
    writer = new Writer();
    return writer.encode(value);
  };

  JICKLE.decode = function(buffer, onload) {
    var reader, result;
    reader = new Reader(buffer, function() {
      return onload(result);
    });
    result = reader.decode();
    if (reader.loading === reader.loaded) {
      onload(result);
    }
    return result;
  };

  JICKLE.get = function(url, callback) {
    var xhr;
    xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function() {
      return JICKLE.decode(xhr.response, callback);
    };
    return xhr.send();
  };

}).call(this);
