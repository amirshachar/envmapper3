// Generated by CoffeeScript 1.8.0
(function() {
  var Client, Host, Interface,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Interface = (function() {
    function Interface(client, methods) {
      var makeMethod, name, _i, _len;
      makeMethod = function(name) {
        return function() {
          return client.call(name);
        };
      };
      for (_i = 0, _len = methods.length; _i < _len; _i++) {
        name = methods[_i];
        this[name] = makeMethod(name);
      }
    }

    return Interface;

  })();

  Client = (function() {
    function Client(selector, init) {
      this.init = init;
      this.onMessage = __bind(this.onMessage, this);
      this.iframe = $(selector)[0];
      window.addEventListener('message', this.onMessage);
      $(this.iframe).load((function(_this) {
        return function() {
          return _this.iframe.contentWindow.postMessage({
            type: 'get-methods'
          }, _this.iframe.src);
        };
      })(this));
    }

    Client.prototype.onMessage = function(event) {
      var data;
      data = event.data;
      if (data.type === 'methods') {
        return this.init(new Interface(this, event.data.methods));
      } else if (data.type === 'return') {
        return this.current.resolve(data.data);
      }
    };

    Client.prototype.message = function(type, data) {
      return this.iframe.contentWindow.postMessage({
        type: type,
        data: data
      }, this.iframe.src);
    };

    Client.prototype.call = function(name) {
      var promise;
      promise = new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.current = {
            resolve: resolve,
            reject: reject
          };
        };
      })(this));
      this.message('call', name);
      return promise;
    };

    return Client;

  })();

  Host = (function() {
    function Host(root) {
      var name, value, _ref;
      this.root = root;
      this.onMessage = __bind(this.onMessage, this);
      window.addEventListener('message', this.onMessage);
      this.methods = [];
      _ref = this.root;
      for (name in _ref) {
        value = _ref[name];
        if (typeof value === 'function') {
          this.methods.push(name);
        }
      }
    }

    Host.prototype.onMessage = function(event) {
      var data, result;
      data = event.data;
      if (data.type === 'get-methods') {
        return event.source.postMessage({
          type: 'methods',
          methods: this.methods
        }, event.origin);
      } else if (data.type === 'call') {
        result = this.root[data.data]();
        return event.source.postMessage({
          type: 'return',
          data: result
        }, event.origin);
      }
    };

    return Host;

  })();

  window.iframeRMI = {
    client: function(selector, init) {
      return new Client(selector, init);
    },
    host: function(root) {
      return new Host(root);
    }
  };

}).call(this);
